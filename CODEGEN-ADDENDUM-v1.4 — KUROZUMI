---

# CODEGEN-ADDENDUM-v1.4 — KUROZUMI（UI/UX特化・中央レイアウト・ER密度・AC強化）

> 目的：**UIを“アイアンマンHUD×モノトーン・サイバーパンク”で中央レイアウト化**し、**ERは列追加で密度を上げる（シート数は増やさない）**。
> 出力は **.gs / .html のみ**（Apps Script HTMLService）。外部ビルド・外部CDN・外部CSS/JS使用**禁止**。

---

## 1) クリティカル修正（今回必須の“上書き”指令）

1. **中央レイアウト固定**（左寄り禁止）

   * ルートコンテナを `max-width:1280px`（XL）、`margin-inline:auto` で**常時中央**。
   * 12カラムグリッド（列幅 `minmax(0,1fr)`）＋ガター 16px。
   * ブレークポイント：`≥1440px:1280px固定` / `≥1024px:<1280pxの90%` / `<1024px: 100%（内側に16pxパディング）`。
   * **AC**：Start/一覧/詳細/編集の**メインカードが常に中央**に表示され、両サイドに**均等の余白**が出ること。

2. **HUDヘッダー（固定）＋Back常設**

   * `position: sticky; top: 0; z-index: 1000; backdrop-filter: blur(6px)`
   * 左：Back（アイコン＋Alt+←）／中央：パンくず自動生成／右：Session情報（User/Role/Store）。
   * **AC**：Back押下/Alt+← で **前状態を完全復元**（検索条件・ページ・ソート・選択・ドロワー）。

3. **ドロワー編集の右スライド**

   * `transform: translateX(100%) → 0`（260ms、cubic-bezier(0.19,1,0.22,1)）。
   * **未保存ガード**（破棄/保存/キャンセル）必須。
   * **AC**：編集→保存でシアングロー、キャンセル時は状態ロールバック。

4. **テーブル（固定ヘッダ／非アクティブの視覚）**

   * 固定ヘッダ：shadow + subtle glow。
   * `tr[data-active="false"]` は `opacity: .45; text-decoration: line-through; pointer-events: none;`。
   * **AC**：ソフト削除済みは**自動でグレーアウト**し操作不可。

5. **ERの“列”だけ増やす（**タブの数は増やさない**）**

   * 例：`MST_Store.business_hours_json / facility_tags / health_permit_expiry`、`MST_Person.tags_json / photo_drive_id / consent_signed_on`、`TRN_AuditTrail.ip/ua/route/session_id`、`MST_Price.timeband` など。
   * **AC**：`Sheets.ensureSheet` は**不足“列”のみ自動追加**。**新しいシート（タブ）は増設しない**。

---

## 2) デザイントークン（styles.htmlに**必須**で入れる）

```css
:root{
  --bg:#0A0A0A; --panel:#121218; --line:#262A32;
  --text:#E6E6E6; --muted:#A0A3A6; --disabled:#6B6E73;
  --glow:#00F6FF; --glow-weak:rgba(0,246,255,.12);
  --accent:#FF2E6D; --ok:#39D98A; --warn:#FFD166; --err:#FF5A5F;
  --radius-xl:16px; --radius-2xl:20px;
  --shadow:0 8px 24px rgba(0,0,0,.35), inset 0 0 0 1px rgba(255,255,255,.02);
  --neon:0 0 16px var(--glow-weak), 0 0 2px var(--glow);
}
html,body{background:var(--bg); color:var(--text);}
.container{
  width:100%; max-width:1280px; margin-inline:auto;
  padding-inline:16px; display:grid; grid-template-columns: repeat(12, minmax(0,1fr));
  gap:16px;
}
.card{background:var(--panel); border:1px solid rgba(255,255,255,.06); border-radius:var(--radius-2xl); box-shadow:var(--shadow);}
.card:hover{box-shadow:var(--neon);}
.hud{position:sticky; top:0; z-index:1000; background:rgba(10,10,10,.75); backdrop-filter:blur(6px); border-bottom:1px solid rgba(255,255,255,.06);}
.btn{border:1px solid rgba(255,255,255,.12); border-radius:12px; padding:.625rem .9rem; background:transparent;}
.btn-primary{border-color:var(--glow); box-shadow:0 0 0 1px rgba(0,246,255,.28) inset;}
.toast{position:fixed; right:24px; top:24px; padding:12px 16px; border-radius:12px; background:#0F1318; border:1px solid rgba(255,255,255,.08); box-shadow:var(--neon);}
.table thead{position:sticky; top:56px; background:linear-gradient(180deg, rgba(18,18,24,.95), rgba(18,18,24,.88));}
tr[data-active="false"]{opacity:.45; text-decoration:line-through; pointer-events:none;}
.focus-ring:focus{outline:2px solid var(--glow); outline-offset:2px;}
```

> **禁止**：外部フォント/CDN/JS/CSS。**すべて styles.html 内完結**。

---

## 3) モーション（scripts.htmlに**必須**で入れる）

* 遷移：Mainコンテナを **フェード(120ms)**＋**3px浮き**。
* 戻る：逆方向フェード(90ms)。
* 保存成功：編集カードの外周に **1.8秒の薄いシアングロー**。
* エラー：対象フォームを **軽くシェイク（-2px/+2px×3回/120ms）**。
* **AC**：トーストは `aria-live="polite"`、Alt+← / Esc / Tab が効く。

---

## 4) ルーティング／状態復元仕様（MPA・Back）

* ルート名固定：`Start`, `People.List`, `People.Detail`, `People.Edit`, `Store.List`, `Store.Detail`, `Pricing.List`, `Pricing.Edit`。
* `route_key = route + '?' + canonical(params)`。状態保存対象：**検索条件、ページ、ソート、選択ID、ドロワー開閉**。
* **AC**：一覧→詳細→編集→**Back**で**直前の状態**に完全復帰。未保存ガードは必須。

---

## 5) ER深堀（**列だけ**増やす・表数は固定）

> **テーブルは増やさない**。必要な密度は**列追加**で担保。以下を最低限追加（命名は厳守）。

* `MST_Store`：`business_hours_json`, `facility_tags`, `health_permit_expiry`
* `MST_FranchiseContract`：`royalty_scheme_json`, `breach_count`
* `MST_Person`：`tags_json`, `photo_drive_id`, `consent_signed_on`
* `MST_Employment`：`is_primary`, `org_unit_path`, `policy_ack_on`
* `MST_Product`：`allergen_codes`, `shelf_life_days`, `recalc_cost_on`
* `BOM_Component`：`yield_rate`, `loss_allowance`
* `MST_Price`：`timeband`, `start_on`, `end_on`, `store_id?`（任意）
* `TRN_AuditTrail`：`ip`, `ua`, `route`, `session_id`

**AC**：`Sheets.ensureSheet(name, headers)` は**不足列を自動追加**し、**タブ（シート）を増やさない**こと。

---

## 6) API契約（再掲＋厳密化）

* **共通**：`{ ok:true, data:{...} }` / `{ ok:false, code, message, details? }`
* **エラーコード**：

  * `PRICE_RANGE_OVERLAP`（同 `menu_item_id + store_id + timeband` で期間交差）
  * `DUPLICATE_PERSON`（`name_kana + birthdate + phone` 厳密一致）
  * `FORBIDDEN`（RBAC）
* **監査**：`Audit.log` は **ip/ua/route/session_id** 付与必須。

**AC**：UI トースト文言は以下の固定コピーを使う：

* 成功：「✅ 保存しました」/「✅ 復元しました」
* 409 重複：「⚠ 期間が重複しています。既存: {start}–{end}」
* 人物重複：「⚠ 同一候補が見つかりました（氏名カナ/生年月日/電話）」
* 権限なし：「🚫 権限がありません」

---

## 7) デモ品質の強制（生成時の“実デモ体験”を担保）

1. **Seedデータ（HTMLだけで）**

   * Startカード：People/Store/Pricing… 各カードに **サンプル件数バッジ**（例：People 126 名）。
   * People.List：ダミー3行（うち1行は `data-active="false"`）。
   * Pricing.List：同 `menu_item_id+store_id+timeband` の**重複デモ**用2行。
   * **AC**：初回起動だけで「中央配置」「Back」「Drawer」「重複409」「ソフト削除グレーアウト」「トースト」が**目視確認**できる。

2. **センタリング確認**

   * 1440/1280/1024/768 の4幅でコンテンツの中央保持。
   * **AC**：どの幅でも左寄りしない。

---

## 8) 追い指示テンプレ（**このままCodexに貼る**）

### PROMPT-FIX-LAYOUT

```
中央レイアウトを強制します。containerは max-width:1280px, margin-inline:auto, grid(12cols, gap16)。HUDヘッダーはsticky+blur。メインカードは常に中央配置。ブレークポイントは 1440/1280/1024/768 を想定し、常に中央を維持。左寄り表示は禁止。
```

### PROMPT-HUD-STYLE

```
styles.html 内にデザイントークンを定義し、外部CSS/JS禁止。カードは角丸20px+ソフトシャドウ+淡いグロー。テーブルは固定ヘッダ、inactive行はopacity.45+line-through。トーストは右上、aria-live=polite。
```

### PROMPT-MOTION

```
scripts.html で遷移フェード(120ms)+浮き、Back逆フェード(90ms)、保存時ネオングロー(1.8s)、エラー時シェイク(120ms×3)。Alt+←/Esc/Tabのアクセシビリティ対応。
```

### PROMPT-MPA-STATE

```
NAV履歴(N=50)と route_key=route+'?'+canonical(params) で状態保存/復元。保存対象は検索条件/ページ/ソート/選択ID/ドロワー開閉。未保存ガード(破棄/保存/キャンセル)を必ず実装。
```

### PROMPT-ER-COLUMNS

```
テーブル数は増やさず、E節の列を既存シートに追加。Sheets.ensureSheet は不足列の自動追加のみ行い、タブ増設は禁止。TRN_AuditTrail には ip/ua/route/session_id を必ず書き込む。
```

### PROMPT-API-STRICT

```
全APIは {ok:true|false, ...} で返す。409は PRICE_RANGE_OVERLAP、人重複は DUPLICATE_PERSON、権限は FORBIDDEN。固定トースト文言を使用。/api/person.*, /api/price.upsert を優先実装。
```

### PROMPT-DEMO-SEED

```
初回デモ体験のため、Start/People.List/Pricing.List にダミー行を埋め込んでUIの中央配置/Back/Drawer/409/ソフト削除/トーストを目視確認できるようにする。ダミーはHTML上のテンプレで良い。
```

### PROMPT-AC-GATE

```
次に進む前に下記ACを満たすこと：
- どの画面も中央レイアウトで左右対称の余白
- Backで状態完全復元（検索/ページ/ソート/選択/ドロワー）
- inactive行の視覚（灰+取り消し線）と操作不可
- 価格の期間重複で409と指定メッセージ
- 監査に ip/ua/route/session_id を格納
- シート（タブ）数は不変、列だけが増える
満たさない場合は同ステージで再生成すること。
```

---

## 9) ビジュアルQAチェックリスト

* [ ] 1440/1280/1024/768 で**常に中央**（左寄りゼロ）
* [ ] HUDヘッダーが薄いグロー＋sticky
* [ ] Back（ボタン/Alt+←）で**直前状態**に復帰
* [ ] Drawerのスライド/未保存ガード
* [ ] 保存成功時の**シアングロー**、エラー時の**シェイク**
* [ ] テーブル固定ヘッダ＋inactiveの**グレーアウト**
* [ ] 409/DUPLICATE/403 の**統一メッセージ**
* [ ] 監査の `ip/ua/route/session_id` が **TRN_AuditTrail** に残る
* [ ] **シート数は不変**、不足**列のみ**が追加されている

---

## 10) 実装メモ（.gs/.htmlだけで仕上げるための注意）

* HTMLService（`createTemplateFromFile`）＋ `<?!= include('styles'); ?> / <?!= include('scripts'); ?>` 構成。
* `google.script.run.withSuccessHandler/withFailureHandler` と JSON API `/api/*` で通信。
* `UiRouteService` がルート名とパンくずを返す。パンくずは**自動生成**。
* Repo/Validate/Audit の I/O は CODEGEN.md の契約のまま。
* **LockService** で書込排他、`CacheService` はLKPなど参照に限定。
* **外部ライブラリ禁止**（地図やアイコンもSVG inlineで最小限）。

わかった。いま必要なのは「**要件定義→生成→検収**」の**拘束力**を最大化する“追加ディレクティブ”＝**抜け漏れを起こさない命令パック**だよね。
**シート数は一切増やさず**、UIは**中央レイアウトのアイアンマン系HUD**、そして**ERは列の密度だけを上げる**——この3本柱で**Codexを厳密に縛る**ための最終版を用意した。これを**CODEGEN-ADDENDUM（最終）**としてREADME/CODEGENと一緒に読み込ませ、下の**PROMPT順**で投げれば、今ある構成のまま“満額着地”させられる。

---

# CODEGEN-ADDENDUM（最終）—「シート数固定」×「中央HUD」×「ER密度アップ」

> 目的：既存シート**一切増やさず**、GAS(.gs)＋HTML(.html)のみで、**MPA/Back/監査/期間重複/ソフト削除**と**未来的HUD UI**を**実演できるレベル**まで作り込ませる。
> ここに書かれた**禁止事項／合格基準**に**Codexは必ず従う**こと。

---

## A. スキーマ・ロック（**タブは増やさない**）

1. **許可する操作**

* 既存の**同名タブ**に対して「**列の追加**／列の並び替え**は不可**（末尾追加のみ）」
* 条件付き書式・検証の追加
* データの投入（Seed）

2. **禁止**

* **新規タブ追加**・既存タブの削除/改名
* 列名の変更・共通列の削除

3. **Schema Lock Manifest（Codexが参照する固定一覧）**
   以下タブ**のみ**を対象とする（既に存在する前提）。この**リスト外へアクセス禁止**。

* **MST_Company / MST_Division / MST_Store / MST_Franchisee / MST_FranchiseContract**
* **MST_Person / MST_Employment / MST_UserAccount / MST_Role / TRN_UserRole**
* **MST_Group / TRN_GroupMember / MST_Address / LNK_Address**
* **MST_Vendor / MST_Product / BOM_Component / MST_MenuItem / MST_Price / MST_Promotion / LNK_PromoApplicability**
* **TRN_PurchaseOrder / TRN_PO_Line / TRN_StockLot / TRN_StockMove**
* **TRN_SalesReceipt / TRN_SalesLine / TRN_Tender**
* **TRN_Shift / TRN_TimeClock / TRN_Leave**
* **TRN_Incident / TRN_IncidentParticipant / TRN_MaintTicket**
* **TRN_Document / LNK_Document**
* **TRN_AuditTrail / TRN_AuditItem**
* **LKP_***（Prefecture/StoreKind/EmploymentType/Role/Tax…）

> 既存ADDENDUM同様、UIナビ用の追加タブは**使わず**、ナビ観測は**アプリ内メモリ＋AuditTrail拡張列**で代替。

---

## B. ER「列」だけ増やす（**最小必須**／末尾追加）

> 下記は**最低限**の増列。**足すなら末尾のみ**、命名は厳守。

* **MST_Store**：`business_hours_json`, `facility_tags`, `health_permit_expiry`
* **MST_FranchiseContract**：`royalty_scheme_json`, `breach_count`
* **MST_Person**：`tags_json`, `photo_drive_id`, `consent_signed_on`
* **MST_Employment**：`is_primary`, `org_unit_path`, `policy_ack_on`
* **MST_Product**：`allergen_codes`, `shelf_life_days`, `recalc_cost_on`
* **BOM_Component**：`yield_rate`, `loss_allowance`
* **MST_Price**：`timeband`, `start_on`, `end_on`, `store_id`(任意)
* **TRN_AuditTrail**：`ip`, `ua`, `route`, `session_id`

**検収AC**

* `ensureSheet()`は**不足列がある場合のみ**末尾追記。
* **タブ数は増えていない**こと（手動でも自動でも）。

---

## C. UI/UX（中央レイアウトのHUD）— **必須仕様**

1. **中央固定**

* `.container{max-width:1280px;margin-inline:auto;display:grid;grid-template-columns:repeat(12,minmax(0,1fr));gap:16px;padding-inline:16px}`
* 1440/1280/1024/768の各幅で**常に中央**（左右余白が均等）

2. **HUDヘッダー（戻る常設）**

* sticky + blur、左：Back（Alt+←対応）、中央：パンくず、右：Session
* Backで**検索条件/ページ/ソート/選択/ドロワー**を完全復元

3. **編集ドロワー**

* 右からスライド、未保存ガード（破棄/保存/キャンセル）、保存成功で**薄いシアングロー1.8秒**

4. **テーブル**

* 固定ヘッダー、`tr[data-active="false"]` は灰+取り消し線+操作不可

5. **動き（最小アニメ）**

* ページ遷移フェード（120ms）/Back逆フェード（90ms）/エラー軽シェイク/トースト`aria-live=polite`

**検収AC**

* **左寄りが一切無いこと**
* キーボード**Alt+←**でBack復帰、**Esc**でドロワークローズ

---

## D. 検証ルール（要件定義に沿った**最低限**）

* **Pricing**：`menu_item_id + store_id + timeband` の期間重複を**409**で拒否（`PRICE_RANGE_OVERLAP`）
* **Person重複**：`name_kana + birthdate + phone` 厳密一致で**409**（`DUPLICATE_PERSON`）
* **LKP整合**：都道府県などは `LKP_*` 参照
* **ソフト削除**：UI削除＝`active_flag=false`＋`deleted_*`、UIは灰＆非操作
* **監査**：`CREATE/UPDATE/DELETE_SOFT/RESTORE`＋`ip/ua/route/session_id` を `TRN_AuditTrail` へ

---

## E. API契約（GAS doPost ルーティング）

* **成功**：`{ ok:true, data:{...} }`
* **失敗**：`{ ok:false, code:"...", message:"...", details? }`
* 主要：

  * `POST /api/person.create|update|deleteSoft|restore`
  * `POST /api/price.upsert`
  * `POST /api/nav.push`（任意・ナビ監査はAuditTrailで代替可）

**固定メッセージ**

* 成功：「✅ 保存しました」/「✅ 復元しました」
* 409 価格：「⚠ 期間が重複しています。既存: {start}–{end}」
* 409 人物：「⚠ 同一候補が見つかりました（氏名カナ/生年月日/電話）」
* 403：「🚫 権限がありません」

---

## F. デモ品質（初回で“見える化”）

* Start：People/Store/Pricingの**ダミーカード**（件数バッジ）
* People.List：ダミー3行（1行は `data-active="false"`）
* Pricing.List：重複を起こすダミー2行（保存時に409を再現）
* **目的**：**コーディングなしでもUIの中央・Back・Drawer・グレーアウト・409トーストが体験できる**

---

## G. 受け入れ基準（**満たすまで次に進まない**）

1. **タブ数不変**（列追加のみ）
2. **中央レイアウト**（全画面で左右対称の余白）
3. **Backで完全復元**（検索/ページ/ソート/選択/ドロワー）
4. **ソフト削除の可視＆非操作**
5. **価格期間重複は409**／**人物重複も409**
6. **AuditTrail** に `ip/ua/route/session_id` 記録
7. **固定トースト文言**が使用されている

---

# Codex への最終指令（そのまま投げるやつ）

> これを**順番に**投げる。各プロンプトの最後に「**上のACを満たすまで次へ進まない**」を必ず付ける。

### 1) PROMPT: スキーマ・ロック適用

```
スキーマ・ロックを適用する。新規タブ作成・既存タブ改名は禁止。既存タブに不足「列」を末尾に追加することのみ許可。Schema Lock Manifestにあるタブ以外はアクセス禁止。ensureSheetは不足列のみ追記し、並び替えや中間挿入は禁止。上のACを満たすまで次へ進まない。
```

### 2) PROMPT: 中央HUD UI（styles.html / index.html / scripts.html）

```
中央レイアウトのHUDを実装。containerはmax-width:1280pxの12グリッド、常に中央。HUDヘッダーはsticky+blur+Back常設、Alt+←対応、パンくず自動生成。ドロワー編集は右スライドと未保存ガード、保存成功時はネオングロー。テーブルは固定ヘッダ、inactive行は灰+取り消し線+非操作。外部CSS/JS禁止・.html内完結。上のACを満たすまで次へ進まない。
```

### 3) PROMPT: MPA状態復元＆Back（NavService / UiController）

```
NAV履歴(N=50)とroute_keyで状態保存/復元を実装。復元対象は検索条件/ページ/ソート/選択ID/ドロワー。BackやAlt+←で直前状態に完全復帰。未保存ガード(破棄/保存/キャンセル)必須。上のACを満たすまで次へ進まない。
```

### 4) PROMPT: Repo/Validate/Audit（列追加のみ対応）

```
Repo/Validate/Auditを実装。upsertはcreated_*/updated_*自動設定、softDeleteはactive_flag=falseとdeleted_*付与、Audit.logはCREATE/UPDATE/DELETE_SOFT/RESTOREに加えip/ua/route/session_idをTRN_AuditTrailへ記録。ensureSheetは不足列のみ追記、タブは増やさない。上のACを満たすまで次へ進まない。
```

### 5) PROMPT: People/Store/Pricing API（409/403/監査）

```
/api/person.create|update|deleteSoft|restore, /api/price.upsert を実装。人物重複（name_kana+birthdate+phone）は409=DUPLICATE_PERSON。価格はmenu_item_id+store_id+timebandの期間重複で409=PRICE_RANGE_OVERLAP。RBACは簡易で403。固定トースト文言を返す。上のACを満たすまで次へ進まない。
```

### 6) PROMPT: デモSeed＆ビジュアルQA

```
Start/People.List/Pricing.Listにダミーデータをセットし、中央配置/Back/Drawer/ソフト削除グレー/409メッセージ/トーストが初回で目視できるようにする。1440/1280/1024/768で左寄りがないことを確認。上のACを満たすまで次へ進まない。
```

---

## 追加の“詰め”ポイント（落ちやすい穴を先回り）

* **「列だけ増やす」実装**：`ensureSheet(name, headers)` に「既存ヘッダとの差分だけ末尾追記」ロジックを**明文化**。
* **中央ズレ対策**：`body{display:flex;}`系は**禁止**（ブラウザ差で左寄り化するため）。`.container`の**auto margin**に統一。
* **Back復元の網羅**：検索条件・ページ・ソート・選択ID・ドロワー開閉の**5点セット**を**一括スナップショット**化（個別保存だと漏れる）。
* **監査の拡張列**：`ip, ua, route, session_id` は**必ず**AuditTrailへ。UIの「今どこ」を証跡化。
* **エラーメッセ一貫性**：409/403は**固定コピー**で返す。UXの質感を揃える。

---

## 最終チェックリスト（あなたの検収用）

* [ ] タブ数**不変**（増えていない）
* [ ] 追加は**列だけ**（末尾）
* [ ] 全画面が**完全中央**（4幅検証）
* [ ] Backで**状態完全復元**（5点セット）
* [ ] `active_flag=false` 行が**灰＋取り消し＋非操作**
* [ ] `price.upsert` 409／`person.create` 409 が**指定メッセ**で出る
* [ ] `TRN_AuditTrail` に `ip/ua/route/session_id` が入っている
* [ ] 外部CSS/JS**不使用**（.gs/.htmlのみ）
* [ ] トーストは右上・`aria-live="polite"`・ショートコピー固定
了解。**“UIの見た目”ではなく、ER/機能関連/システムフロー/ボタン→処理→シート反映の作り込み**を、いまの **HTML/gs の枠内**・**シート数を増やさない**条件で、**Codexにやらせ切るための指令書（実装仕様）**としてまとめます。
以下はそのまま**CODEGEN.md 追補**や **README の実装章**に貼って、Codexへ投げられる粒度です（コード断片は出しません／関数名・I/O契約だけ示します）。

---

# Spec Pack v1.1.1（深掘り版）— “何を押すと何が起きて、どのシートのどの列がどう更新されるか”

## A. 画面体系（MPA）と親子項目マップ

> 画面は **Start → Domain Hub → List → Detail → Edit/Confirm**。
> **Back は常設**（直前状態復元）。**シート数は増やさない**。各画面のボタンは**必ず API 経由**でシートへ反映。

### A-1. Domain Hub（カテゴリと親子の対応）

| 親カテゴリ（Route）                  | 子リソース（親子）                                       | List列（抜粋）            | 主キー                            | 保存先シート                                                                               |
| ----------------------------- | ----------------------------------------------- | -------------------- | ------------------------------ | ------------------------------------------------------------------------------------ |
| People (`/people`)            | Person → Employment → UserAccount / GroupMember | 氏名、配属、雇用形態、状態        | `person_id`                    | `MST_Person`, `MST_Employment`, `MST_UserAccount`, `TRN_UserRole`, `TRN_GroupMember` |
| Stores (`/stores`)            | Division → Store → Asset                        | 店舗コード、区分、ステータス、開店/閉店 | `store_id`                     | `MST_Division`, `MST_Store`, `MST_Asset`                                             |
| Franchise (`/franchise`)      | Franchisee → FranchiseContract (⇄ Store)        | FCコード、契約ID、期間、ロイヤルティ | `franchisee_id`, `contract_id` | `MST_Franchisee`, `MST_FranchiseContract`                                            |
| Products (`/products`)        | Product → BOM_Component                         | SKU、カテゴリ、標準原価        | `product_id`, `bom_id`         | `MST_Product`, `BOM_Component`                                                       |
| Menu & Pricing (`/pricing`)   | MenuItem → Price → Promotion/Applicability      | メニュー、価格、期間、税区分       | `menu_item_id`, `price_id`     | `MST_MenuItem`, `MST_Price`, `MST_Promotion`, `LNK_PromoApplicability`               |
| Inventory (`/inventory`)      | PurchaseOrder → PO_Line → StockLot → StockMove  | 仕入/入荷、在庫ロット、移動       | `po_id`, `lot_id`, `move_id`   | `TRN_PurchaseOrder`, `TRN_PO_Line`, `TRN_StockLot`, `TRN_StockMove`                  |
| Sales (`/sales`)              | SalesReceipt → SalesLine → Tender               | 取引ID、日時、計、決済         | `receipt_id`, `line_id`        | `TRN_SalesReceipt`, `TRN_SalesLine`, `TRN_Tender`                                    |
| Quality & Safety (`/quality`) | Incident → IncidentParticipant                  | 種類、発生日、店舗、SLA        | `incident_id`, `inc_part_id`   | `TRN_Incident`, `TRN_IncidentParticipant`                                            |
| Assets & Maint. (`/assets`)   | Asset → MaintTicket                             | 機器、シリアル、保守、発生/完了     | `asset_id`, `ticket_id`        | `MST_Asset`, `TRN_MaintTicket`                                                       |
| Docs & Workflow (`/docs`)     | Document → DocumentLink                         | 文書、版、カテゴリ、権限         | `doc_id`, `doc_link_id`        | `TRN_Document`, `LNK_Document`                                                       |

---

## B. 役割別の「見せ方」「できること」マトリクス（RBAC + ビュー制御）

> **同じ List/Detail でも、役割で列・ボタンの可視／不可視を分岐**。
> シートは増やさず、**フロントの表示制御＋サーバ側の権限検証**で担保。

### B-1. 役割×画面アクション（抜粋）

| 画面/リソース            |      HQ_ADMIN | AREA_MANAGER | STORE_MANAGER | STORE_STAFF |  HR | FINANCE |     LEGAL | AUDITOR |
| ------------------ | ------------: | -----------: | ------------: | ----------: | --: | ------: | --------: | ------: |
| Person List/Detail | R/W/D/Approve |     R/W (配下) |         R（自店） |     R（自分のみ） | R/W |       – |         – |       R |
| UserAccount        |         R/W/D |            – |             – |           – |   R |       – |         – |       R |
| Store              |         R/W/D |      R/W（配下） |       R/W（自店） |   R（公開項目のみ） |   – |       – |         – |       R |
| Pricing（Price）     | R/W/D/Approve |      R/W（配下） |         R（閲覧） |           – |   – |       – |         – |       R |
| Sales              |         R（全体） |        R（配下） |         R（自店） |           – |   – | R/W（集計） |         – |       R |
| Incident           |         R/W/D |      R/W（配下） |       R/W（自店） |   R/W（一次報告） |   – |       – | R（法務レビュー） |       R |
| Document           |         R/W/D |            – |             – |           – |   – |       – |     R/W/D |       R |

**D = Soft Delete 標準。Hard Delete は HQ_ADMIN 限定ユーティリティからのみ。**
**Approve = 期間重複や重要項目の承認（価格・契約等）。**

### B-2. 列レベル表示制御（例）

* `MST_Person.bank_account`, `consent_doc_link` … **HQ_ADMIN/HR のみ可視**
* `MST_Store.health_office_name`, `license_deepnight_expiry` … **HQ/Area/StoreMgr は可視**
* `TRN_AuditTrail.before_json/after_json` … **AUDITOR/HQ_ADMIN のみ可視**

---

## C. **ボタン → API → シート書き込み** 完全ルート表（実働契約）

> **HTML 側のボタンID**と**Apps Script 側のエンドポイント名**と**対象シート・列更新**を 1:1 で紐付け。
> **監査**は全アクションで `TRN_AuditTrail`／`TRN_AuditItem` に残す。
> **削除はソフト削除**（`active_flag=false`, `deleted_*`）。

### C-1. People（ユーザー登録/更新/削除/復元）

| UIボタン（id）             | API（`doPost` ルート）        | リクエスト（必須キー）                       | 更新シート/列                                             | 監査 `operation`                 |
| --------------------- | ------------------------ | --------------------------------- | --------------------------------------------------- | ------------------------------ |
| `btnPersonCreate`     | `/api/person.create`     | `person{...}`, `employment?{...}` | `MST_Person`（新行, 共通列 auto）, `MST_Employment`（雇用履歴行） | `CREATE`                       |
| `btnPersonUpdate`     | `/api/person.update`     | `person_id`, `patch{...}`         | `MST_Person`（差分更新）, 必要に応じ `MST_Employment`          | `UPDATE`（列ごとに `TRN_AuditItem`） |
| `btnPersonSoftDelete` | `/api/person.deleteSoft` | `person_id`, `reason?`            | `MST_Person.active_flag=false`, `deleted_*`         | `DELETE_SOFT`                  |
| `btnPersonRestore`    | `/api/person.restore`    | `person_id`                       | `MST_Person.active_flag=true`, `deleted_*` null     | `RESTORE`                      |

> **重複検知**：`name_kana + birthdate + phone` 厳密一致時は `DUPLICATE_PERSON` 返却（UIはトースト警告）。
> **列表示**：`bank_account` など機微項目は HR/HQ のみ表示・編集可。

### C-2. Stores（店舗登録/更新/削除）

| UIボタン            | API                     | リクエスト                                                              | 更新先                           | 監査            |
| ---------------- | ----------------------- | ------------------------------------------------------------------ | ----------------------------- | ------------- |
| `btnStoreCreate` | `/api/store.create`     | `store{division_id, store_code, kind, address..., open_date, ...}` | `MST_Store` 新行                | `CREATE`      |
| `btnStoreUpdate` | `/api/store.update`     | `store_id`, `patch{...}`                                           | `MST_Store`                   | `UPDATE`      |
| `btnStoreDelete` | `/api/store.deleteSoft` | `store_id`                                                         | `MST_Store.active_flag=false` | `DELETE_SOFT` |

### C-3. Pricing（価格の期間重複ブロック）

| UIボタン            | API                 | リクエスト                                                                     | 更新先               | 監査                   | エラー                        |
| ---------------- | ------------------- | ------------------------------------------------------------------------- | ----------------- | -------------------- | -------------------------- |
| `btnPriceUpsert` | `/api/price.upsert` | `{menu_item_id, price, tax_code, start_on, end_on, store_id?, timeband?}` | `MST_Price`（履歴追記） | `CREATE` or `UPDATE` | `PRICE_RANGE_OVERLAP`（409） |

> **noOverlap 判定**：キー（`menu_item_id`,`store_id`）で `[start_on,end_on]` の重複を禁止。

### C-4. Inventory（在庫ロット/移動）

| UIボタン           | API                  | リクエスト                                                            | 更新先                | 監査       |
| --------------- | -------------------- | ---------------------------------------------------------------- | ------------------ | -------- |
| `btnReceiveLot` | `/api/stock.receive` | `{product_id, store_id, received_on, expiry_on, qty, unit_cost}` | `TRN_StockLot` 新規  | `CREATE` |
| `btnMoveStock`  | `/api/stock.move`    | `{lot_id, from_loc, to_loc, qty, reason, ref_id?}`               | `TRN_StockMove` 追記 | `CREATE` |

### C-5. Sales（売上）

| UIボタン            | API                        | リクエスト                                                               | 更新先                                               |
| ---------------- | -------------------------- | ------------------------------------------------------------------- | ------------------------------------------------- |
| `btnSalesCreate` | `/api/sales.createReceipt` | `receipt{store_id, cashier_person_id, sold_at, lines[], tenders[]}` | `TRN_SalesReceipt`, `TRN_SalesLine`, `TRN_Tender` |

### C-6. Incident（品質）

| UIボタン               | API                    | 更新先                                       |
| ------------------- | ---------------------- | ----------------------------------------- |
| `btnIncidentReport` | `/api/incident.report` | `TRN_Incident`, `TRN_IncidentParticipant` |

> 以降のドメイン（Franchise/Docs/Assets など）も**同形式**で列挙（シート数は既存維持）。

---

## D. **ER図/機能関連図/システムフロー**（Mermaid スニペット再掲＋差分注記）

> 既存ERは維持。**差分は子テーブルの「操作起点」を図中コメントで明示**し、「どの画面のどのボタンからその子が追加されるか」を追記する。
> GitHub の `docs/er/` に分割保存。

### D-1. 機能関連図（操作起点コメント付き・例）

```mermaid
flowchart TB
  People[People\n(PERSON/EMPLOYMENT/USER)]:::op
  Stores[Stores\n(STORE/DIVISION/ASSET)]:::op
  Pricing[Pricing\n(MENU_ITEM/PRICE/PROMO)]:::op
  Sales[Sales\n(RECEIPT/LINE/TENDER)]:::op
  Inventory[Inventory\n(LOT/MOVE)]:::op

  People --> Sales
  Products --> Pricing --> Sales
  Inventory --> Sales
  Stores --> Inventory
  Stores --> Sales

classDef op fill:#111,stroke:#2af,stroke-width:1px,color:#e6ffff;
```

**差分注記（README へ）**：

* `PRICE` は **Pricing List の「新規価格」ボタン**から作成。
* `EMPLOYMENT` は **Person Detail の「配属を追加」**から作成。
* `STOCK_MOVE` は **Inventory Detail の「移動」**から作成。

### D-2. 主要シーケンス（押下→検証→書込→監査→復帰）

Person作成・価格改定・ソフト削除の3本は既出。ここに**ユーザー登録（UserAccount）**を追加：

```mermaid
sequenceDiagram
  actor Admin
  participant UI
  participant API as GAS API
  participant REPO
  participant AUD as Audit
  participant DB as Sheets

  Admin->>UI: ユーザー登録（Personを選択→ログインID/ロール）
  UI->>API: POST /api/userAccount.create {person_id, login_id, roles[]}
  API->>REPO: upsert MST_UserAccount, TRN_UserRole
  REPO->>DB: 追記（共通列付与）
  API->>AUD: log CREATE (UserAccount, UserRole)
  AUD->>DB: 監査追記
  API-->>UI: {ok:true, user_id}
  UI-->>Admin: 成功トースト（BackでPerson詳細に復帰）
```

---

## E. **フィールド設計の「親→子→孫」チェックリスト**（シート増やさず充足）

> 各親画面に**子作成のエントリポイント**を設け、**必須キーを親から引き継ぐ**ことでブレない入力を担保。

### E-1. People 親→子

* 親：`MST_Person(person_id)`
* 子：`MST_Employment(person_id, store_id, start_on, end_on, ... )`
* 孫：`MST_UserAccount(person_id, login_id, ...)`、`TRN_UserRole(user_id, role_id, start_on, end_on)`

**UI要件**

* Person Detail に **「配属を追加」「ユーザーを付与」**ボタン。押下でモーダル開→親ID（person_id）を hidden で持参。
* 保存後は Detail に戻り、**差分ハイライト**と **Back**で一覧に復帰。

### E-2. Store 親→子

* 親：`MST_Store(store_id)`
* 子：`MST_Asset(store_id, ...)`

### E-3. Menu & Pricing 親→子

* 親：`MST_MenuItem(menu_item_id)`
* 子：`MST_Price(menu_item_id, store_id?, start_on, end_on, price, tax_code, timeband?)`
* 検証：**`noOverlap(menu_item_id, store_id)`**で期間重複禁止。

…（Inventory, Sales, Incident も同様の親→子→孫を README に項目化）

---

## F. **権限で“見せない”設計（画面・列・アクション）**

> **見せない**→**押せない**→**サーバ側でも拒否**の三層防御。

1. **画面ルート制御**

* `UiRouteService.resolve(user_roles)` でアクセス可能 Route のみメニュー表示。
* 不正直打ちURLは 403 カード（Back で退避）。

2. **列レベル制御**

* `scripts.html` のテーブルレンダリングで `visibleColumnsByRole[route][role]` を適用。
* 例：Staff は `bank_account` 列を受け取っても描画しない。

3. **アクション制御**

* ボタンに `data-required-role="HR|HQ_ADMIN|..."` を付与し、クライアントで無効化。
* サーバ側も API で `roleGate(entity, op, user)` を必須化（未満は `FORBIDDEN`）。

---

## G. **性能・大規模運用（1シート数万行OK）**

* **ページング**：List は `limit=100, cursor`。Back 復帰時に cursor と検索条件を復元。
* **検索**：`Repo.query(table, filterDSL)`（AND/OR/範囲）。`CacheService` で LKP を 30 分キャッシュ。
* **排他**：`Lock.withLock(table, fn)` で同時更新保護、指数リトライ。
* **更新方式**：まとめて `Sheets.batchUpdate`。差分抽出のみ更新。
* **アーカイブ**：年度末に TRN 系を `_ARCHIVE_YYYY` へローテーション（**シート数は増やさない**、同一ブック内で分割）。

---

## H. **Codex への追加指令（不足なく作り込ませるための“言い切り”プロンプト）**

> 既存の STAGE 指令に**以下を追加**してください。**コードは生成するが、シート数は変えない**ことを明記します。

### H-1. ROUTE/画面とボタン定義を先に固定する指示

```
次を厳密に実装せよ（コードは .gs/.html のみ、シート数は一切増やさない）：
1) 画面ルート：/people, /stores, /franchise, /products, /pricing, /inventory, /sales, /quality, /assets, /docs
2) 各List/Detail/編集モーダルのボタンIDを固定し、ボタン→API→シート列のマップは CODEGEN.md C章に一致させる
3) RBAC: 画面/列/アクションの三段制御を入れる（表示非表示＋API側Gate）
4) Back復帰：検索条件/ページ/ソート/選択/ドロワー状態を復元する
5) 監査：全API操作で TRN_AuditTrail/Item を追記する（before/afterは差分）
6) 期間重複：Pricing.upsert で noOverlap を必須化（409エラー）
```

### H-2. ER/機能図の「操作起点コメント」を README に自動反映する指示

```
Mermaid図（ER/機能関連/シーケンス/DFD）は docs/er/* に分割保存し、
各子テーブルの作成起点（どの画面のどのボタンから作るか）をコメントで追記して README にも再掲すること。
```

### H-3. 列レベル制御・可視性の辞書を埋める指示

```
routes/{route}/visibleColumnsByRole を定義し、描画時に列フィルタを適用する。
機微項目（銀行口座、同意リンク、監査JSON等）は HR/HQ/AUDITOR のみ可視。
クライアントとサーバの両方で権限チェックを行うこと。
```

### H-4. 大規模対応の必須要件

```
Repo.query は filterDSL（field op value の配列）を取り、結果をページングして返す。
トランザクション更新は Lock.withLock＋batchUpdate で行い、共通列（updated_*, deleted_*）を自動設定する。
```

---

## I. **受け入れ基準（この通り動けば合格）**

1. **ボタン→シート**：People/Stores/Pricing/Inventory/Sales/Incident の代表アクションが、**対応シートの正しい列**に書き込まれる。
2. **RBAC**：一般ユーザには機微列が一切見えず、押下も不可。直打ちは 403。
3. **Back**：List→Detail→Edit→Back で**検索条件・ページ・選択行**が復元。
4. **ソフト削除**：`active_flag=false` で UI グレーアウト（または非表示）、監査は `DELETE_SOFT`。復元で `RESTORE`。
5. **価格重複**：重複期間を 409 エラーで拒否し、UIはトースト表示＋該当既存行を提示。
6. **性能**：5万行相当の List でも 100件ページングで操作が継続可能。
7. **シート数**：**一切増えていない**（UIナビ拡張は今回 “使わない” 設定）。

---

## J. **ユーザー登録/削除（UserAccount）と権限制御の実装契約（ノーコード版）**

* **登録**：`/api/userAccount.create {person_id, login_id, two_factor, roles[]}`

  * 書込：`MST_UserAccount`（1行）、`TRN_UserRole`（roles配列分）
  * 監査：`CREATE`×2（UserAccount, UserRole）
  * 画面：Person Detail の「ユーザーを付与」からのみ起動

* **削除（ソフト）**：`/api/userAccount.deleteSoft {user_id}`

  * 書込：`MST_UserAccount.active_flag=false, deleted_*`
  * 監査：`DELETE_SOFT`
  * 復元：`/api/userAccount.restore {user_id}` → `active_flag=true`

* **権限制御**：

  * ルート入場：`UiRouteService.resolve(user)`
  * 列表示：`visibleColumnsByRole` 辞書
  * アクション：`roleGate(entity, op, user)`（API入口で必須）

---

## K. **システムフロー（MPA×GAS×Sheets：押下単位の時系列）**

1. **List表示**：UI が `query(filter, page)` → GAS `Repo.query` → Sheets 読込 → JSON 返却 → 表描画（役割で列を間引く）
2. **Detail遷移**：`NAV_PUSH(route, params, state)` で履歴積む → Detail 表示
3. **編集→保存**：ボタン押下 → `doPost` API → `Validate.*` → `Repo.upsert/softDelete` → `Audit.log` → 正常応答 → UI トースト → **Backで Detail/ List の状態復元**
4. **削除**：SoftDelete → UI グレーアウト or 非表示（設定） → 復元は逆手順
5. **価格重複**：`Validate.noOverlap` が NG を返す → 409 エラー → UI トースト＆該当期間ハイライト

---

## L. **あなたの今の .gs / .html に“足すだけ”で届く変更点リスト（実装観点）**

> コードは生成させます。ここでは**何を足すべきか**だけ。

1. `UiRouteService.gs`

   * ルート配列に **10カテゴリ**を定義（A-1参照）。
   * `resolve(user)` が役割に応じた表示ルートを返却。

2. `scripts.html`

   * **ボタンIDを固定**（C章参照）。
   * `visibleColumnsByRole` を辞書化。
   * `historyStack` に **検索条件・ページ・ソート・選択行・ドロワー状態**を保存/復元。

3. `UiController.gs`

   * `doPost` で **全APIルート**をディスパッチ（/api/person.*, /api/store.*, /api/price.*, …）。
   * 入口で `roleGate`／`validateRequest` を必ず通す。

4. `Repo.gs / Validate.gs / Audit.gs`

   * `upsert/softDelete/hardDelete/noOverlap/log` を**契約どおり**に。
   * 共通列は **自動更新**（created/updated/deleted）。

5. `styles.html`

   * 見た目は据え置きで良いが、**グレーアウト**（`[data-inactive="true"]`）のスタイルと**差分ハイライト**を確実に追加。

---

## M. 最後に：シート数は固定のまま中身で勝つ

* **親→子→孫**は「親画面からの子作成ボタン」で繋ぎ、**主キー受け渡し**で整合。
* **RBAC**は「見せない・押せない・サーバ拒否」の三層に分解。
* **監査/ソフト削除/期間重複**は全部“標準装備”。
* **大量行**はページング＋Lock＋バッチ更新で実運用可。
* **図面（ER/機能/DFD/シーケンス）**は**操作起点コメント**を付けて GitHub `docs/` に再掲し、**README にリンク**。

---


